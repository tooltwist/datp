/* Copyright Tooltwist Innovations Limited - All Rights Reserved
 * This file is part of DATP and as such is proprietary and confidential software.
 * Unauthorized copying of this file, via any medium is strictly prohibited. All
 * rights reserved. No warranty, explicit or implicit, provided. In no event shall
 * the author or owner be liable for any claim or damages.
 */
import GenerateHash from './GenerateHash'
import GateHandler from './GateHandler'

const WAITING = 'waiting'
const ERROR = 'error'
const TIMEOUT = 'timeout'

const VERBOSE = false

class Gates {

  constructor () {
    this.gate = [ ]
  }

  async defineGate(name, description, handler, payload) {

    if (!(handler instanceof GateHandler)) {
      throw new Error(`handler parameter must be instance of GateHandler`)
    }
    const gateId = GenerateHash('gate')
    const token = GenerateHash('token')
    // console.log(`gateId is ${gateId}`)

    const gate = {
      gateId,
      token, // step completion must quote this
      name,
      description,

      //
      status: WAITING,

      // Information passed to the handler
      handler,
      payload,

      // ZZZZ Should contain a timeout, or several types of timeout
    }
    this.gate[gateId] = gate

    if (VERBOSE) {
      console.log(`adding gate ${gateId}`, gate)
    }

    return {
      gateId,
      token,
    }
  }

  async triggerGate(gateId, token) {
    // Find the gate definition
    const gate = this.gate[gateId]
    if (!gate) {
      // This is BAD, and should be reported. ZZZZZZ
      throw new Error(`Unknown gate ${gateId} - possible hack attempt`)
    }

    // Check the token is correct
    if (token != gate.token) {
      // This is BAD, and should be reported. ZZZZZZ
      throw new Error(`Incorrect token for gate ${gateId} - possible hack attempt`)
    }

    console.log(`Triggering gate ${gateId}.`)

    // Remove the gate from our list
    const handler = gate.handler
    const payload = gate.payload
    console.log(`handler = `, handler)
    delete this.gate[gateId]

    // This is a valid trigger. Call the handler with the payload
    await handler.triggered(gateId, payload)

    // ZZZZ Probably should not wait for the handler
    // ZZZZ Should check for timeout
  }

  async getGates(includeWaiting) {
    console.log(`getGates()`)
    console.log(`this.gate = `, this.gate)
    const list = [ ]
    for (const gateId in this.gate) {
      const gate = this.gate[gateId]
      console.log(`-> ${gate.gateId}`)
      list.push({
        name: gate.name,
        description: gate.description,
        gateid: gate.gateId,
        status: statusString(gate.status)
      })
    }
    list.sort((a, b) => {
      if (a < b) return -1
      if (a > b) return +1
      return 0
    })
    return list

  }
}

function statusString(status) {
  // switch (status) {
  //   case
  //   const WAITING = 'waiting'
  //   const ERROR = 'error'
  //   const TIMEOUT = 'timeout'
  //     }
  return status.toUpperCase()
}

const defaultGates = new Gates()
export default defaultGates